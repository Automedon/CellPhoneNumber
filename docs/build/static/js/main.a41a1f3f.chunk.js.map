{"version":3,"sources":["actions/types.js","rootReducer.js","reducers/CellPhoneReducer.js","store.js","helpers/validateCellPhone.js","components/forms/CellPhoneForm.js","actions/cellPhone.js","components/pages/CellPhonePage.js","App.js","serviceWorker.js","index.js"],"names":["SEND_CELLPHONENUMBER","combineReducers","cellPhone","state","success","number","action","type","data","store","createStore","rootReducer","applyMiddleware","thunk","check","validate","errors","test","CellPhoneForm","onChange","e","setState","target","name","value","onSubmit","preventDefault","Object","keys","length","props","sendCellPhoneNumber","this","className","role","global","htmlFor","id","placeholder","Component","connect","dispatch","CellPhonePage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAAaA,EAAuB,uB,4NCIrBC,kBAAgB,CAC7BC,UCJa,WAGZ,IAFDC,EAEA,uDAFQ,CAAEC,SAAS,EAAOC,OAAQ,IAClCC,EACA,uDADS,GAET,OAAQA,EAAOC,MACb,KAAKP,EACH,O,qVAAO,CAAP,GAAYG,EAAZ,CAAmBC,SAAS,EAAMC,OAAQC,EAAOE,KAAKH,SACxD,QACE,OAAOF,MCNAM,EAAQC,YAAYC,EAAaC,YAAgBC,M,mDCHjDC,EAAQ,8CACRC,EAAW,SAAAP,GACvB,IAAMQ,EAAS,GAEf,OADKF,EAAMG,KAAKT,EAAKH,UAASW,EAAOX,OAAS,kBACvCW,G,ujBCEFE,E,2MACJf,MAAQ,CACNK,KAAM,CACJH,OAAQ,IAEVW,OAAQ,I,EAGVG,SAAW,SAAAC,GAAC,OACV,EAAKC,SAAS,CACZb,KAAK,KAAM,EAAKL,MAAMK,KAAlB,eAAyBY,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,W,EAG1DC,SAAW,SAAAL,GACTA,EAAEM,iBACF,IAAMV,EAASD,EAAS,EAAKZ,MAAMK,MACnC,EAAKa,SAAS,CAAEL,WACmB,IAA/BW,OAAOC,KAAKZ,GAAQa,QACtB,EAAKC,MAAMC,oBAAoB,EAAK5B,MAAMK,O,wEAIpC,IAAD,EACkBwB,KAAK7B,MAAtBK,EADD,EACCA,KAAMQ,EADP,EACOA,OADP,EAEqBgB,KAAKF,MAAzB1B,EAFD,EAECA,QAASC,EAFV,EAEUA,OACjB,OACE,oCACID,EA6BA,yBAAK6B,UAAU,sBAAsBC,KAAK,SAA1C,gCACgC7B,GA7BhC,yBAAK4B,UAAU,gCACb,0BAAMR,SAAUO,KAAKP,UAClBT,EAAOmB,QACN,yBAAKF,UAAU,sBAAsBjB,EAAOmB,QAG9C,yBAAKF,UAAU,cACb,2BAAOG,QAAQ,UAAf,qBACA,2BACE7B,KAAK,OACL8B,GAAG,SACHd,KAAK,SACLC,MAAOhB,EAAKH,OACZc,SAAUa,KAAKb,SACfmB,YAAW,oBACXL,UACEjB,EAAOX,OAAS,0BAA4B,iBAGhD,yBAAK4B,UAAU,oBAAoBjB,EAAOX,SAG5C,4BAAQE,KAAK,SAAS0B,UAAU,6BAAhC,sB,GAlDcM,aA6EbC,cAZQ,SAAArC,GACrB,MAAO,CACLC,QAASD,EAAMD,UAAUE,QACzBC,OAAQF,EAAMD,UAAUG,SAW1B,CAAE0B,oBCpF+B,SAAAvB,GAAI,OAAI,SAAAiC,GAEzCA,EAAS,CAAElC,KAAMP,EAAsBQ,YDgF1BgC,CAGbtB,GEzEawB,E,iLARX,OACE,oCACE,kBAAC,EAAD,W,GAJoBH,aCQbI,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCMcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAD,CAAUzC,MAAOA,GACf,kBAAC,EAAD,OAEF0C,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a41a1f3f.chunk.js","sourcesContent":["export const SEND_CELLPHONENUMBER = 'SEND_CELLPHONENUMBER';","import { combineReducers } from \"redux\";\n\nimport cellPhone from \"./reducers/CellPhoneReducer\";\n\nexport default combineReducers({\n  cellPhone\n});\n","import { SEND_CELLPHONENUMBER } from \"../actions/types\";\nexport default function cellPhoneReducer(\n  state = { success: false, number: \"\" },\n  action = {}\n) {\n  switch (action.type) {\n    case SEND_CELLPHONENUMBER:\n      return { ...state, success: true, number: action.data.number };\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./rootReducer\";\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n","export const check = /^\\\\([0-9]{3}\\\\) [0-9]{3}-[0-9]{2}-[0-9]{2}$/; //вынесено для тестирования\nexport const validate = data => {\n\tconst errors = {};\n\tif (!check.test(data.number)) errors.number = \"Invalid number\";\n\treturn errors\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { sendCellPhoneNumber } from \"../../actions/cellPhone\";\nimport { validate } from \"../../helpers/validateCellPhone\";\n\nclass CellPhoneForm extends Component {\n  state = {\n    data: {\n      number: \"\"\n    },\n    errors: {}\n  };\n\n  onChange = e =>\n    this.setState({\n      data: { ...this.state.data, [e.target.name]: e.target.value }\n    });\n\n  onSubmit = e => {\n    e.preventDefault();\n    const errors = validate(this.state.data);\n    this.setState({ errors });\n    if (Object.keys(errors).length === 0) {\n      this.props.sendCellPhoneNumber(this.state.data);\n    }\n  };\n\n  render() {\n    const { data, errors } = this.state;\n    const { success, number } = this.props;\n    return (\n      <>\n        {!success ? (\n          <div className=\"container col-md-6 col-sm-12\">\n            <form onSubmit={this.onSubmit}>\n              {errors.global && (\n                <div className=\"alert alert-danger\">{errors.global}</div>\n              )}\n\n              <div className=\"form-group\">\n                <label htmlFor=\"number\">Cell Phone Number</label>\n                <input\n                  type=\"text\"\n                  id=\"number\"\n                  name=\"number\"\n                  value={data.number}\n                  onChange={this.onChange}\n                  placeholder={`\\u005C455\\u005C 987-01-02`}\n                  className={\n                    errors.number ? \"form-control is-invalid\" : \"form-control\"\n                  }\n                />\n                <div className=\"invalid-feedback\">{errors.number}</div>\n              </div>\n\n              <button type=\"submit\" className=\"btn btn-primary btn-block\">\n                Send Number\n              </button>\n            </form>\n          </div>\n        ) : (\n          <div className=\"alert alert-success\" role=\"alert\">\n            You successfully sent number {number}\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nconst mapSateToProps = state => {\n  return {\n    success: state.cellPhone.success,\n    number: state.cellPhone.number\n  };\n};\n\nCellPhoneForm.propTypes = {\n  success: PropTypes.bool.isRequired,\n  number: PropTypes.string.isRequired\n};\n\nexport default connect(\n  mapSateToProps,\n  { sendCellPhoneNumber }\n)(CellPhoneForm);\n","import { SEND_CELLPHONENUMBER } from \"./types\";\nexport const sendCellPhoneNumber = data => dispatch => {\n  // в реальности здесь посылаем данные на сервер и в случае успешного ризолва диспатчим данные с сервера в стор\n  dispatch({ type: SEND_CELLPHONENUMBER, data });\n};\n","import React, { Component } from \"react\";\nimport CellPhoneForm from \"../forms/CellPhoneForm\";\n\nclass CellPhonePage extends Component {\n  render() {\n    return (\n      <>\n        <CellPhoneForm />\n      </>\n    );\n  }\n}\n\nexport default CellPhonePage;\n","import React from \"react\";\nimport CellPhonePage from \"./components/pages/CellPhonePage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CellPhonePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}